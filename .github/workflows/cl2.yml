name: Credibility Assessment Level 2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_model:
    name: Build Model
    uses: ./.github/workflows/build.yml

  build_tracefile_player:
    name: Build Tracefile Player FMU
    runs-on: ubuntu-latest

    steps:
    - name: Cache Protobuf
      id: cache-protobuf
      uses: actions/cache@v3
      with:
        path: protobuf-21.12
        key: ${{ runner.os }}-protobuf

    - name: Download ProtoBuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz && tar xzvf protobuf-all-21.12.tar.gz

    - name: Build ProtoBuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      working-directory: protobuf-21.12
      run: ./configure DIST_LANG=cpp --disable-shared CXXFLAGS="-fPIC" && make

    - name: Install ProtoBuf
      working-directory: protobuf-21.12
      run: sudo make install && sudo ldconfig

    - name: Get Tracefile Player
      run: git clone https://gitlab.com/persival-open-source/open-simulation-interface/osi-trace-file-player.git

    - name: Prepare C++ Build
      working-directory: osi-trace-file-player
      run: git submodule update --init && mkdir build

    - name: Configure CMake
      working-directory: osi-trace-file-player/build
      run: cmake -DCMAKE_PREFIX_PATH:PATH=${DEPS_DIR}/protobuf/install ..

    - name: Build C++
      working-directory: osi-trace-file-player/build
      run: cmake --build .
      
    - name: Create FMU Directory
      working-directory: osi-trace-file-player/build
      run: mkdir /tmp/tracefile_fmu

    - name: Copy Tracefile FMU
      working-directory: osi-trace-file-player/build
      run: cp src/OSMPTraceFilePlayer.fmu /tmp/tracefile_fmu/OSMPTraceFilePlayer.fmu

    - name: Cache Tracefile FMU
      id: cache-tracefile-fmu
      uses: actions/cache@v3
      with:
        path: /tmp/tracefile_fmu
        key: ${{ runner.os }}-tracefile-fmu

  build_osi_field_checker_fmu:
    name: Build OSI Field Checker FMU
    runs-on: ubuntu-latest

    steps:
      - name: Cache Protobuf
        id: cache-protobuf
        uses: actions/cache@v3
        with:
          path: protobuf-21.12
          key: ${{ runner.os }}-protobuf

      - name: Download ProtoBuf
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz && tar xzvf protobuf-all-21.12.tar.gz

      - name: Build ProtoBuf
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        working-directory: protobuf-21.12
        run: ./configure DIST_LANG=cpp --disable-shared CXXFLAGS="-fPIC" && make

      - name: Install ProtoBuf
        working-directory: protobuf-21.12
        run: sudo make install && sudo ldconfig

      - name: Clone OpenMSL Sensor Model Testing
        run: git clone https://github.com/openMSL/sl-1-5-sensor-model-testing.git

      - name: Checkout Branch
        working-directory: sl-1-5-sensor-model-testing
        run: git checkout check-file-fmi-parameter

      - name: Prepare C++ Build
        working-directory: sl-1-5-sensor-model-testing
        run: git submodule update --init && mkdir build

      - name: Configure CMake
        working-directory: sl-1-5-sensor-model-testing/build
        run: cmake -DCMAKE_PREFIX_PATH:PATH=${DEPS_DIR}/protobuf/install ..

      - name: Build C++
        working-directory: sl-1-5-sensor-model-testing/build
        run: cmake --build .

      - name: Create FMU Directory
        working-directory: sl-1-5-sensor-model-testing/build
        run: mkdir /tmp/osi-field-checker

      - name: Copy OSI Field Checker FMU
        working-directory: sl-1-5-sensor-model-testing/build
        run: cp OSIFieldChecker.fmu /tmp/osi-field-checker/OSIFieldChecker.fmu

      - name: Cache OSI Field Checker FMU
        id: cache-osi-field-checker
        uses: actions/cache@v3
        with:
          path: /tmp/osi-field-checker
          key: ${{ runner.os }}-osi-field-checker

  build_openmcx:
    name: Build OpenMCx
    runs-on: ubuntu-latest

    steps:
      - name: Cache OpenMCx
        id: cache-openmcx
        uses: actions/cache@v3
        with:
          path: openmcx
          key: ${{ runner.os }}-openmcx

      - name: Install dependencies
        run: sudo apt install -y libxml2-dev zlib1g-dev libzip-dev

      - name: Get OpenMCx
        if: steps.cache-openmcx.outputs.cache-hit != 'true'
        run: git clone https://github.com/eclipse/openmcx.git

      - name: Build OpenMCx
        if: steps.cache-openmcx.outputs.cache-hit != 'true'
        working-directory: openmcx
        run: ./build.sh

  generateInputPaths:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Generate matrix with all integration tests
        id: set-matrix
        directory: test/integration
        run: |
          echo "::set-output name=matrix::$(ls -l | grep '^d' | awk -F ' ' '{print $9}' | grep -Po '\d{3}.*' | jq -R -s -c 'split("\n") | map(select(length > 0))')"
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  run_osi_field_check:
    needs: [build_model, build_tracefile_player, build_openmcx, build_osi_field_checker_fmu, generateInputPaths]
    name: Run Model FMU
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.generateInputPaths.outputs.matrix) }}
    steps:
      - name: Checkout Model
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Cache Model FMU
        id: cache-model-fmu
        uses: actions/cache@v3
        with:
          path: /tmp/model_fmu
          key: ${{ runner.os }}-model-fmu

      - name: Cache Tracefile FMU
        id: cache-tracefile-fmu
        uses: actions/cache@v3
        with:
          path: /tmp/tracefile_fmu
          key: ${{ runner.os }}-tracefile-fmu

      - name: Cache OSI Field Checker
        id: cache-osi-field-checker
        uses: actions/cache@v3
        with:
          path: /tmp/osi-field-checker
          key: ${{ runner.os }}-osi-field-checker

      - name: Cache OpenMCx
        id: cache-openmcx
        uses: actions/cache@v3
        with:
          path: openmcx
          key: ${{ runner.os }}-openmcx

      - name: Install dependencies
        run: sudo apt install -y libxml2-dev zlib1g-dev libzip-dev

      - name: Run OpenMCx
        id: cosimulation
        run: ./openmcx/install/openmcx ${{ github.workspace }}/${{ matrix.inputPath }}/SystemStructure.ssd

      - name: Failed?
        if: steps.cosimulation.outputs.pass == 0
        run: exit 1